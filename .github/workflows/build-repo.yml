# This is a basic workflow to help you get started with Actions

name: Build Repo

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
#  pull_request:
#    branches: [ "main" ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      #- uses: actions/checkout@v3
      - uses: actions/checkout@v4

      # Prints all environment variables
      - name: Prints all environment variables [env]
        run: |
          echo " ###### Print all Environment variables...[env]"
          env

      # Prints variable contexts
      - name: Prints variable contexts [toJson(vars)]
        run: |
          echo " ###### Print variable context...[toJson(vars)]"
          echo "${{ toJson(vars) }}"

      - name: Print Defined Variables [$(compgen -A variable) ]
        run: |
          echo " ###### Print all Defined variables... [$(compgen -A variable) ]"
          for var in $(compgen -A variable); do
            echo "${var}: ${!var}"
          done
      
      - name: Print Environment Variables [printenv]
        run: |
          echo " ###### Print all Environment variables...[printenv]"
          printenv
          
      - name: Print GitHub Context [toJson(github)]
        run: |
          echo " ###### Print GitHub Context...[toJson(github)]"
          echo "${{ toJson(github) }}"
  
  Build_01:
    runs-on: ubuntu-latest
    environment:
      name: My Environment
    env:
      # this will take the entire vars context configured in the repository > environments
      # setting and convert it to JSON so we can automatically assign all the values to the
      # runner's environment
      VARS_CONTEXT: ${{ toJson(vars) }}
    steps:
      #- uses: actions/checkout@v3
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        #with:
        #  node-version-file: .nvmrc
        #  cache: npm
    
      - name: Set env vars from vars context JSON
        run: |
          # Pipe the JSON string into jq
          echo "$VARS_CONTEXT" | 
          # Convert JSON object into an array of key-value pairs
          jq -r 'to_entries | 
          # Map over each key-value pair
          .[] | 
          # Format each pair as "KEY=VALUE" and append it all to the environment file
          "\(.key)=\(.value)"' >> $GITHUB_ENV
      
      - name: Print Environment Variables [printenv]
        run: |
          echo " ###### Print all Environment variables...[printenv][01]"
          printenv
